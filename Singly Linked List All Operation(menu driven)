#include <stdio.h>
#include <stdlib.h>


struct node
{

    int data;
    struct node *next;

};
struct node *create()
{
    struct node *curr,*head,*newnode;
    int n,i;
    head=NULL;
    printf("enter no of node");
    scanf("%d",&n);
    printf("\nenter the data");
    for(i=0;i<n;i++)
    {
    newnode=(struct node*)malloc(sizeof(struct node));
    scanf("%d",&newnode->data);
    if(head==NULL)
        head=curr=newnode;
    else{
        curr->next=newnode;
        curr=newnode;
    }
    }
    newnode->next=NULL;
    return(head);
};

void display(struct node *head)
{
    struct node *curr=head;



    for(curr=head;curr!=NULL;curr=curr->next)
        printf("%d\t",curr->data);

}

void countnodes(struct node *head)
{
    int count=0;
    struct node *curr=head;
    while(curr!=NULL)
    {
        count++;
        curr=curr->next;

    }
    printf("\n no of node %d",count);

}

struct node *insert(struct node *head)
{
    struct node *newnode,*curr;
    int pos,i;
    newnode =(struct node *)malloc(sizeof(struct node));
    printf("enter data to inser:");
    scanf("%d",&newnode->data);
    printf("enter the position to insert:");
    scanf("%d",pos);
    if(pos==1)
    {
        newnode->next=head;
        head=newnode;

    }
    else
    {
        curr=head;
        for(i=1;i<pos-1;i++)
        {
            curr=curr->next;
            if(curr==NULL)
            {
                printf("pos not found..");
                return(head);
            }
        }
        newnode->next=curr->next;
        curr->next=newnode;

    }
    return(head);

};
struct node *delete(struct node *head)
{
    struct node *curr,*temp;
    int pos,i;
    printf("ente rthe position of node to delete :");
    scanf("%d",&pos);
    if (pos==1)
    {
        curr=head;
        head=head->next;
        free(curr);

    }
    else {
        curr=head;
        for(i=0;i<pos;i++)
        {
            temp=curr;
            curr=curr->next;
            if(curr==NULL)
            {
                printf("position not found....");
                return (head);

            }
        }
        temp->next=curr->next;
        free(curr);
    }
    return(head);



};





void search(struct node *head)
{
    int x,pos;
    struct node *curr;
    printf("enter th data to serch");
    scanf("%d",&x);
    curr=head;
    pos=1;
    while(curr!=NULL)
    {
        if(curr->data==x)
        {
            printf("found at %d",pos);
            return;

        }
        else
        {
            curr=curr->next;
            pos++;
        }

    }
    printf("not found....");

}

void sort(struct node *head)

{

    int t;
    struct node *curr,*temp;
    for(curr=head;curr!=NULL;curr=curr->next)
    {
        for(temp=curr->next;temp!=NULL;temp=temp->next  )
            if(curr->data>temp->data)
        {
            t=curr->data;
            curr->data=temp->data;
            temp->data=t;
        }
    }
}

struct node *reverse(struct node *head)
{
    struct node *p, *q, *r;

    p = q = r =head;
    p = p->next->next;
    q = q->next;
    r->next = NULL;
    q->next = r;

    while (p != NULL)
    {
        r = q;
        q = p;
        p = p->next;
        q->next = r;
    }
    head = q;
}



void main()
{
  struct node *head=NULL;
  int ch;
  while(1)

  {
      printf("\n 1. create singly list");
      printf("\n 2.display");
      printf("\n 3.search");
      printf("\n 4.count node");

      printf("\n 5. insert node:(no)");
      printf("\n 6. deletet node:");
      printf("\n 7. reverse node:");

      printf("\n 0.exit");

      printf("\n enter choise:");
      scanf("%d",&ch);
      switch(ch)
      {
          case 1:head=create();
          break;
          case 2:display(head);
          break;
          case 3:
              search(head);
          break;
          case 4:countnodes(head);
          break;
          case 5:head=insert(head);
          break;
          case 6:head=delete(head);
          display(head);
          break;
          case 7: head=reverse(head);
          display(head);
          break;

          break;
          case 0:exit(0);
          default:printf("wrong choise:");

      }



  }

}
